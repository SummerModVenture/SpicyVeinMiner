buildscript {
    ext.kotlin_version = "1.3.71"
    repositories {
        jcenter()
        mavenCentral()
        maven { url = "http://files.minecraftforge.net/maven" }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:3+'
    }
}
plugins {
    id "org.jetbrains.kotlin.jvm" version "1.3.71"
}
apply plugin: 'net.minecraftforge.gradle'

version = "${project.mod_version}"
group = "${project.group_name}"
archivesBaseName = "${project.archive_name}"

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8'

sourceSets {
    api {
        kotlin {
            srcDir 'src/api/kotlin'
        }
    }
    main {
        compileClasspath += sourceSets.api.output
        runtimeClasspath += sourceSets.api.output
    }
    test {
        compileClasspath += sourceSets.api.output
        runtimeClasspath += sourceSets.api.output
    }
}

minecraft {
    // The mappings can be changed at any time, and must be in the following format.
    // snapshot_YYYYMMDD   Snapshot are built nightly.
    // stable_#            Stables are built at the discretion of the MCP team.
    // Use non-default mappings at your own risk. they may not always work.
    // Simply re-run your setup task after changing the mappings to update your workspace.
    mappings channel: 'snapshot', version: '20200916-1.16.2'
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.

    // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
            properties 'fml.earlyprogresswindow': 'false'

            if (project.hasProperty('mc_uuid')) {
                //Your uuid without any dashes in the middle
                args '--uuid', project.getProperty('mc_uuid')
            }
            if (project.hasProperty('mc_username')) {
                //Your username/display name, this is the name that shows up in chat
                // Note: This is not your email, even if you have a Mojang account
                args '--username', project.getProperty('mc_username')
            }
            if (project.hasProperty('mc_accessToken')) {
                //Your access token, you can find it in your '.minecraft/launcher_profiles.json' file
                args '--accessToken', project.getProperty('mc_accessToken')
            }

            mods {
                spicyminer {
                    sources(sourceSets.main, sourceSets.api)
                }
                spicycore {
                    source project(":core").sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                spicyminer {
                    sources(sourceSets.main, sourceSets.api)
                }
                spicycore {
                    source project(":core").sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            args '--mod', 'spicyminer', '--all', '--output', file('src/generated/resources/')

            mods {
                spicyminer {
                    sources(sourceSets.main, sourceSets.api)
                }
                spicycore {
                    source project(":core").sourceSets.main
                }
            }
        }
    }
}

repositories {
    mavenCentral()
    jcenter()
    maven {
        name 'JEI'
        url "https://dvs1.progwml6.com/files/maven"
    }
//    maven {
//        name 'HWYLA'
//        url "https://maven.tehnut.info"
//    }
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"

    minecraft "net.minecraftforge:forge:1.16.3-34.1.1"

    compile project(":core")
//    compileOnly fg.deobf("mezz.jei:jei-${minecraft_version}:${jei_version}:api")
//    runtimeOnly fg.deobf("mezz.jei:jei-${minecraft_version}:${jei_version}")
//    compileOnly fg.deobf("mcp.mobius.waila:Hwyla:${hwyla_version}:api")
//    runtimeOnly fg.deobf("mcp.mobius.waila:Hwyla:${hwyla_version}")
}

compileKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}
compileTestKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}

jar {
    manifest {
        attributes([
                "Specification-Title": "spicyminer",
                "Specification-Vendor": "spicymodcrew",
                "Specification-Version": "1", // We are version 1 of ourselves
                "Implementation-Title": project.name,
                "Implementation-Version": "${version}",
                "Implementation-Vendor" :"spicymodcrew",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}
